---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { inputs, textarea, button = 'שלח', description = '', formName = 'contact' } = Astro.props;
---

<form method="POST" name={formName} data-netlify="true" netlify-honeypot="bot-field" id={`form-${formName}`}>
  {/* Hidden field required by Netlify Forms */}
  <input type="hidden" name="form-name" value={formName} />

  {/* Honeypot field for spam protection */}
  <p style="display: none;">
    <label>
      Don't fill this out if you're human: <input name="bot-field" />
    </label>
  </p>

  {/* Success message container */}
  <div
    id={`form-success-${formName}`}
    class="hidden mb-6 p-4 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 rounded-lg"
  >
    <p class="font-medium">תודה! המייל נשלח בהצלחה. נחזור אליכם בהקדם.</p>
  </div>

  {/* Error message container */}
  <div
    id={`form-error-${formName}`}
    class="hidden mb-6 p-4 bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-lg"
  >
    <p class="font-medium">אירעה שגיאה. אנא נסו שוב או חייגו אלינו בטלפון.</p>
  </div>

  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }) =>
          name && (
            <div class="mb-6">
              {label && (
                <label for={name} class="block text-sm font-medium">
                  {label}
                </label>
              )}
              <input
                type={type}
                name={name}
                id={name}
                autocomplete={autocomplete}
                placeholder={placeholder}
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                required
              />
            </div>
          )
      )
  }

  {
    textarea && (
      <div class="mb-6">
        <label for="textarea" class="block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          required
        />
      </div>
    )
  }


  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit">
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>

<script define:vars={{ formName }}>
  const formId = `form-${formName}`;
  const successId = `form-success-${formName}`;
  const errorId = `form-error-${formName}`;

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById(formId);
    const successMsg = document.getElementById(successId);
    const errorMsg = document.getElementById(errorId);

    if (!form) return;

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Hide previous messages
      if (successMsg) successMsg.classList.add('hidden');
      if (errorMsg) errorMsg.classList.add('hidden');

      const formData = new FormData(form);

      try {
        const response = await fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams(formData).toString(),
        });

        if (response.ok) {
          // Show success message
          if (successMsg) {
            successMsg.classList.remove('hidden');
            // Scroll to success message
            successMsg.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          }
          // Reset form
          form.reset();
        } else {
          throw new Error('Form submission failed');
        }
      } catch (error) {
        // Show error message
        if (errorMsg) {
          errorMsg.classList.remove('hidden');
          errorMsg.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
      }
    });
  });
</script>
